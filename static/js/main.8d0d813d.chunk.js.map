{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","monster","name","src","email","CardList","users","map","username","key","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","string","monsters","fetch","then","respons","json","user","this","filteredMonsters","filter","toLowerCase","includes","logo","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,kC,oQCI9BC,G,kBAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAKF,EAAMG,QAAQC,KAAMC,IAAK,mEACnC,4BAAML,EAAMG,QAAQC,MACpB,2BAAKJ,EAAMG,QAAQG,UCFdC,EAAW,SAAAP,GAAK,OACrB,yBAAKC,UAAU,aAEVD,EAAMQ,MAAMC,KAAI,SAAAC,GAAQ,OACxB,kBAAC,EAAD,CAAMC,IAAKD,EAASE,GAAIT,QAASO,SCNjCG,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,2BACAd,UAAU,SACVe,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCmECG,E,YArEb,aAAc,IAAD,8BACX,+CAgCAH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SA/BtC,EAAKC,MAAM,CACTC,OAAO,WACPC,SAAS,CACP,CACEtB,KAAK,MACLQ,GAAG,KAEL,CACER,KAAK,OACLQ,GAAG,KAEL,CACER,KAAK,UACLQ,GAAG,MAELJ,MAAM,GACNa,YAAY,IAnBL,E,iFAyBO,IAAD,OACVM,MAAM,8CAELC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAI,OAAI,EAAKX,SAAS,CAACZ,MAAMuB,S,+BAQnC,IAAD,SACsBC,KAAKR,MAA1BhB,EADD,EACCA,MAAMa,EADP,EACOA,YACPY,EAAiBzB,EAAM0B,QAAO,SAAA/B,GAAO,OACzCA,EAAQC,KAAK+B,cAAcC,SAASf,EAAYc,kBACpD,OACE,yBAAKlC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKI,IAAKgC,IAAMpC,UAAU,WAAWC,IAAI,SACzC,2BACG8B,KAAKR,MAAMC,QAEd,4BAAQa,QAAS,kBAAM,EAAKlB,SAAS,CAAEK,OAAO,gBAA9C,WAGF,4BAAKO,KAAKR,MAAME,SAASjB,KAAI,SAAAN,GAAO,OAChC,wBAAIQ,IAAMR,EAAQS,IACRT,EAAQC,UAIpB,gDACA,kBAAC,EAAD,CACAU,YAAY,kBACZC,aAAciB,KAAKjB,eAEnB,kBAAC,EAAD,CAAUP,MAAOyB,S,GA/DPM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.8d0d813d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\nimport './card.style.css';\r\n\r\nexport const Card = props =>(\r\n    <div className='card-container'>\r\n        <img alt={props.monster.name} src={'https://robohash.org/${props.monster.id}?set=set2&size=180x180'}/>\r\n        <h3>{ props.monster.name }</h3>\r\n        <p>{ props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\n \r\nimport './card-list.style.css';\r\n\r\nimport {Card } from '../card/card.component';\r\n\r\nexport const CardList = props => (\r\n        <div className='card-list'>\r\n             { \r\n             props.users.map(username => (\r\n             <Card key={username.id} monster={username} />\r\n             ))}\r\n            \r\n        </div>\r\n        );","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n    <input \r\n    className='search'\r\n    type='search' \r\n    placeholder= {placeholder}\r\n    onChange={handleChange}\r\n    />\r\n);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox} from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n\n    this.state={\n      string:'Hi Javad',\n      monsters:[\n        {\n          name:'ali',\n          id:'1'\n        },\n        {\n          name:'reza',\n          id:'2'\n        },\n        {\n          name:'hossein',\n          id:'3'\n        }],\n        users:[],\n        searchField:''\n    };\n\n    //this.handleChange=this.handleChange.bind(this);\n  }\n  \n  componentDidMount(){\n           fetch('https://jsonplaceholder.typicode.com/users')\n           //fetch('http://redbee.ir/service/ProductList?ApiKey=redbee@2016.ir') Access-Control-Allow-Origin\n           .then(respons => respons.json())\n           .then(user => this.setState({users:user}))\n           //.catch(error => {console.error(error)})\n    };\n\n    handleChange = e => {\n      this.setState({searchField:e.target.value})\n    };\n\n  render(){\n    const {users,searchField} = this.state;\n    const filteredMonsters=users.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          {this.state.string}\n        </p>\n        <button onClick={() => this.setState({ string:'Bye Javad' })}>Change</button>\n        \n      </header>\n      <ul>{this.state.monsters.map(monster => (\n          <li key={ monster.id } >\n                  { monster.name }\n          </li>\n         ))}\n        </ul>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n        placeholder='search monsters'\n        handleChange={this.handleChange}\n        />\n        <CardList users={filteredMonsters}/>\n        \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}